#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();


/*
 * Complete the 'decryptPassword' function below.
 *
 * The function is expected to return a STRING.
 * The function accepts STRING s as parameter.
 */
char* decryptPassword(char* s) {
      //first we are gonna to swap passwords numbers moving at ith 
      int l = strlen(s);
      int count = 0;
     for(int i = 0; i<l; i++)
     {
         if(s[i]<=57 && s[i]>48 )
         count++;
     }
     int j = 0;
      for(int i = l-1; i>=0; i--)
      {
          if(count == j)
          break;
          else
          {
           if(s[i] == '0')
           {
               char c = s[i];
               s[i] = s[j];
               s[j] = c;
               j++;
           }}
      }
      //swapping
      for(int i = 0; i<=l; i++)
     {       
    if((i+count)<=l)
      s[i] = s[i+count];
      }
      l = strlen(s);
      
      //swapping uppercase and lowercases
      
      for(int i = 0; i<l-1; i++)
      {
          if((s[i]>64 && s[i]<90) &&( s[i+1]<=123 && s[i+1]>=96) && s[i+2] == '*')
          {
              char tmp = s[i];
              s[i] = s[i+1];
              s[i+1] = tmp;
          }
      }
      //swapping
      for(int i = 0; i<l; i++)
      {
          if(s[i] == '*')
          {
              for(int k = i; k<l; k++)
              {s[k] = s[k+1];}
              l = strlen(s);
          }
      }
      return s;
}



//main function is provided bydefault
int main()
{
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    char* s = readline();

    char* result = decryptPassword(s);

    fprintf(fptr, "%s\n", result);

    fclose(fptr);

    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;

    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) {
            break;
        }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
            break;
        }

        alloc_length <<= 1;

        data = realloc(data, alloc_length);

        if (!data) {
            data = '\0';

            break;
        }
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';

        data = realloc(data, data_length);

        if (!data) {
            data = '\0';
        }
    } else {
        data = realloc(data, data_length + 1);

        if (!data) {
            data = '\0';
        } else {
            data[data_length] = '\0';
        }
    }

    return data;
}
